#version 460
#extension GL_EXT_ray_tracing : enable
/*
struct Vertex {
    vec3 position;
    vec3 normal;
    vec3 color;
};

layout(set = 0, binding = 0) buffer Vertices {
    Vertex vertices[];
} vertexBuffer;
*/


layout(set = 0, binding = 1) buffer Matrices {
    mat4 modelMatrix;
} matrices;

layout(binding = 2, set = 0) uniform accelerationStructureEXT TLAS;

layout(set = 0, binding = 3) uniform CameraData {
    mat4 viewMatrix;
    mat4 projectionMatrix;
    vec3 cameraPosition;
} cameraData;

layout(set = 0, binding = 4, rgba8) uniform image2D img;


layout(location = 0) rayPayloadEXT RayPayload {
    vec4 color;
} payload;




vec3 calculateRayDirection(ivec2 pixelCoord, ivec2 imageSize) {
    // Paso 1: Convertir a NDC
    vec2 ndc = (2.0 * vec2(pixelCoord) - vec2(imageSize)) / vec2(imageSize.x, -imageSize.y);
    
    // Paso 2: Calcular dirección del rayo en espacio de la cámara
    // Suponemos que la cámara mira hacia -z en el espacio de la cámara
    vec4 rayClip = vec4(ndc.x, ndc.y, -1.0, 1.0);
    vec4 rayEye = inverse(cameraData.projectionMatrix) * rayClip;
    rayEye = vec4(rayEye.xy, -1.0, 0.0);

    // Paso 3: Transformar a espacio del mundo
    vec3 rayWorld = normalize((inverse(cameraData.viewMatrix) * rayEye).xyz);

    return rayWorld;
}



void main() {

    ivec2 pixelCoord = ivec2(gl_LaunchIDEXT.xy);  // Coordenadas del píxel
    ivec2 imageSize = ivec2(gl_LaunchSizeEXT.xy); // Tamaño de la imagen

    vec3 rayOrigin = cameraData.cameraPosition;
    vec3 rayDirection = calculateRayDirection(pixelCoord, imageSize);

    // Preparar para trazar el rayo
    uint rayFlags = gl_RayFlagsOpaqueEXT | gl_RayFlagsTerminateOnFirstHitEXT;
    float tMin = 0.01;  // Comenzar a trazar desde una pequeña distancia de la cámara para evitar auto-intersección
    float tMax = 100.0; // Máxima distancia del rayo

    payload.color = vec4(0.0, 0.0, 0.0, 0.0);

    // Trazar el rayo
    traceRayEXT(
        TLAS,            // Estructura de aceleración
        0xff,            // Flags del rayo
        0,               // Culling mask
        0,               // SBT record offset
        0,               // SBT record stride
        0,               // Miss index
        cameraData.cameraPosition,  // Origen del rayo
        tMin,            // tMin
        rayDirection,    // Dirección del rayo
        tMax,            // tMax
        0                // Payload location
    );

    imageStore(img, pixelCoord, payload.color);

    // Usar los datos de 'payload' para escribir en la imagen
    // Por ejemplo, si 'payload' contiene un color basado en la intersección
    // imageStore(img, pixelCoord, payload);
    
    
    /*vec4 color = vec4(1.0,0.0,0.0, 1.0); // Color rojo fijo
    ivec2 pixelCoord = ivec2(gl_LaunchIDEXT.xy);
    imageStore(img, pixelCoord, color);*/
}

