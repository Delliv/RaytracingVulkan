#version 460 core
#extension GL_EXT_ray_tracing : enable

struct Vertex {
    vec3 position;
    vec3 normal;
    vec3 color;
};

layout(set = 0, binding = 0) buffer Vertices {
    Vertex vertices[];
} vertexBuffer;



layout(set = 0, binding = 1) buffer Matrices {
    mat4 modelMatrix;
} matrices;

layout(binding = 2, set = 0) uniform accelerationStructureEXT TLAS;

layout(set = 0, binding = 3) uniform CameraData {
    mat4 viewMatrix;
    mat4 projectionMatrix;
    vec3 cameraPosition;
} cameraData;


layout(location = 0) rayPayloadEXT  vec4 payload;
layout(location = 1) rayPayloadEXT  vec3 hitNormal;
layout(location = 2) rayPayloadEXT  vec3 hitColor;
layout(binding = 4, rgba8) uniform image2D resultadoImagen;

vec3 calculateRayDirection(float u, float v) {
    vec4 clipSpacePos = vec4(2.0 * u - 1.0, 1.0 - 2.0 * v, 1.0, 1.0);
    vec4 eyeSpacePos = inverse(cameraData.projectionMatrix) * clipSpacePos;
    eyeSpacePos = eyeSpacePos / eyeSpacePos.w;
    vec4 worldSpacePos = inverse(cameraData.viewMatrix) * vec4(eyeSpacePos.xyz, 1.0);
    vec3 rayDir = normalize(worldSpacePos.xyz - cameraData.cameraPosition);
    return rayDir;
}

void main() {
    /*uint pixelX = gl_LaunchIDEXT.x;
    uint pixelY = gl_LaunchIDEXT.y;
    uint width = gl_LaunchSizeEXT.x;
    uint height = gl_LaunchSizeEXT.y;

    float u = (float(pixelX) + 0.5) / float(width);
    float v = (float(pixelY) + 0.5) / float(height);

    vec3 rayOrigin = cameraData.cameraPosition;
    vec3 rayDirection = calculateRayDirection(u, v);

    hitColor = vec3(0.0); // Inicializar el color del hit

    traceRayEXT(
        TLAS, // Estructura de aceleración
        gl_RayFlagsOpaqueEXT, // Opciones del rayo
        0xFF, // Máscara del rayo
        0, // SBT record offset
        0, // SBT record stride
        0, // Miss index
        rayOrigin, // Origen del rayo
        0.001, // T_min
        rayDirection, // Dirección del rayo
        10000.0, // T_max
        2 // Payload location
    );
    */
   vec3 normalizedPosition = (cameraData.cameraPosition + vec3(1.0)) / vec3(2.0);
   ivec2 pixelCoord = ivec2(gl_LaunchIDEXT.xy);
   imageStore(resultadoImagen, pixelCoord, vec4(1.0, 0.0, 0.0, 1.0)); // Rojo, por ejemplo
}


